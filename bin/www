#!/usr/bin/env node

"use strict";

const server = require("../dist/src/app");
const config = require("../dist/config/config");
const debug = require("debug")("express:server");
const http = require("http");
const mongoose = require('mongoose');

const httpPort = normalizePort(config.server.port);
const app = server.Server.bootstrap().app;

let httpServer;
app.set("port", httpPort);

mongoose.connection.on("connected", () => {
  debug("Connected to mongodb");

  httpServer = http.createServer(app);
  httpServer.listen(httpPort);
  httpServer.on("error", onError);
  httpServer.on("listening", onListening);
});

mongoose.connect(`mongodb://${config.db.mongo}/test`);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ?
    "Pipe " + port :
    "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case "EACCES":
    console.error(bind + " requires elevated privileges");
    process.exit(1);
    break;
  case "EADDRINUSE":
    console.error(bind + " is already in use");
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === "string" ?
    "pipe " + addr :
    "port " + addr.port;
  debug("Listening on " + bind);
}
